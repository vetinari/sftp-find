#!/usr/bin/perl
#
# sfind - search for files in an SFTP accessible directory hierarchy
#
# $Id$
#

use strict;
use warnings;
use Net::SSH2;
use Getopt::Long  qw{ :config require_order };
use POSIX qw{ S_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISREG 
              strftime 
            };
## host key:
use MIME::Base64;
use Digest::HMAC_SHA1 qw{ hmac_sha1 };
use Digest::SHA qw{ sha1 };
use Socket;

use Time::HiRes qw{ gettimeofday tv_interval };

my $HAVE_AUTH_AGENT = ($Net::SSH2::VERSION >= 0.40
                        and (libssh2_version() >= 10203));
my $DEBUG = 0;
my ($remote_user, $remote_host, $remote_port, $key_file, $pub_key, $sec_key);
my ($use_realpath, $use_ssh_agent, $no_host_key_check);
my $USER = scalar(getpwuid($<)) || $ENV{USER};
my ($HOME) = (getpwuid($<))[7]  || $ENV{HOME};

my $script = $0;
$script =~ s#.*/##;

GetOptions(
        "user|login|l=s"        => \$remote_user,
        "key|identify-file|i=s" => \$key_file,
        "port|p=i"              => \$remote_port,
        "agent|a" => sub {
                die "$script: --agent not supported by Net::SSH2 / libssh2\n"
                    unless $HAVE_AUTH_AGENT;
                $use_ssh_agent = 1;
            },
        "pub-key=s"             => \$pub_key,
        "sec-key=s"             => \$sec_key,
        "real-path"             => \$use_realpath,
        "no-host-key-check"     => \$no_host_key_check,
        "debug|d"               => \$DEBUG,
    )
    or die usage();

if (($sec_key and not $pub_key) or ($pub_key and not $sec_key)) {
    die "$script: one of --sec-key and --pub-key is missing\n";
}
if ($sec_key and $key_file) {
    die "$script: cannot give --sec-key and --key at the same time\n";
}
if ($key_file) {
    $sec_key = $key_file;
    $pub_key = "$key_file.pub";
}
$remote_user ||= $USER;
$remote_port ||= scalar(getservbyname("ssh", "tcp")) || 22;

my $user_at_host = shift @ARGV
  or die usage();

my ($user, $host, $base_dir);
if ($user_at_host =~ s/^(([^@]+)\@)?([\w\d\.\-]+)://) {
    if (defined $2 and $2 ne "") {
        $remote_user = $2;
    }
    $remote_host = $3;
    $base_dir = $user_at_host;
    if ($base_dir eq "") {
        $base_dir = ".";
    }
}

my @criteria    = ();
my $eol         = "\n";
my $printf      = '%p';
my $ls_mode     = 0;
my $max_depth   = undef;
my $depth_first = 0;
my $negate      = 0;

my %options = (

        '-not' => {
            option => sub {
                $negate = 1;
            },
        },

        '-type' => {
            option => sub {
                my $v = shift @ARGV;
                if (!defined $v or $v =~ /^-/) {
                    die "$script: option -type requires an argument\n";
                }
                my $test;
                if    ($v eq 'f') { $test = \&S_ISREG; }
                elsif ($v eq 'd') { $test = \&S_ISDIR; }
                elsif ($v eq 'b') { $test = \&S_ISBLK; }
                elsif ($v eq 'c') { $test = \&S_ISCHR; }
                elsif ($v eq 'p') { $test = \&S_ISFIFO; }
                elsif ($v eq 'l') { $test = \&S_ISLNK; }
                elsif ($v eq 's') { $test = \&S_ISSOCK; }
                else {
                    die "$script: unknown argument '$v' for -type\n";
                }
                push @criteria, ['-type', $test, undef, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $test, $chr, $negate) = @_;
                my $ret = $test->($entry->{mode});
                return ($negate ? !$ret : $ret);
            },
        },

        '-name' => {
            option => sub {
                my $v = shift @ARGV;
                if (!defined $v or $v =~ /^-/) {
                    die "$script: option -name requires an argument\n";
                }
                $v = qr/$v/ or die "$script: ivalid regex for -name\n";
                push @criteria, ['-name', $v, undef, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $test, $args, $negate) = @_;
                if ($negate) { $entry->{name} !~ $test; }
                else         { $entry->{name} =~ $test; }
            },
        },

        '-iname' => {
            option => sub {
                my $v = shift @ARGV;
                if (!defined $v or $v =~ /^-/) {
                    die "$script: option -iname requires an argument\n";
                }
                $v = qr/$v/i or die "$script: ivalid regex for -iname\n";
                push @criteria, ['-iname', $v, undef, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $test, $args, $negate) = @_;
                if ($negate) { $entry->{name} !~ $test; }
                else         { $entry->{name} =~ $test; }
            },
        },

        '-regex' => {
            option => sub {
                my $v = shift @ARGV;
                if (!defined $v or $v =~ /^-/) {
                    die "$script: option -iname requires an argument\n";
                }
                $v = qr/$v/ or die "$script: ivalid regex for -regex\n";
                push @criteria, ['-regex', $v, undef, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $test, $args, $negate) = @_;
                my $file = $entry->{path}.'/'.$entry->{name};
                if ($negate) { $file !~ $test; }
                else         { $file =~ $test; }
            },

        },

        '-uid' => {
            option => sub {
                my $v = shift @ARGV;
                if (!defined $v or $v =~ /^-/) {
                    die "$script: option -uid requires an argument\n";
                }
                push @criteria, ['-uid', $v, undef, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $test, $args, $negate) = @_;
                my $ret = ($entry->{uid} == $test);
                return $negate ? !$ret : $ret;
            },
        },

        '-gid' => {
            option => sub {
                my $v = shift @ARGV;
                if (!defined $v or $v =~ /^-/) {
                    die "$script: option -gid requires an argument\n";
                }
                push @criteria, ['-gid', $v, undef, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $test, $args, $negate) = @_;
                my $ret = ($entry->{gid} == $test);
                return $negate ? !$ret : $ret;
            },
        },

        '-empty' => {
            option => sub {
                push @criteria, ['-empty', undef, undef, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $test, $args, $negate) = @_;
                return $negate ? $entry->{size} : !$entry->{size};
            },
        },

        '-mtime' => {
            option => sub {
                my ($cmp, $val) = check_cmp_option('-mtime', shift @ARGV);

                push @criteria, ['-mtime', ref_time_start($val, 86400), $cmp, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $ref, $cmp, $negate) = @_;
                my $m = $entry->{mtime} - ($entry->{mtime} % 86400);

                my $ret;
                if    ($cmp eq '-') { $ret = ($m > $ref); }
                elsif ($cmp eq '+') { $ret = ($m < $ref); }
                else                { $ret = ($m == $ref); }

                return $negate ? !$ret : $ret;
            },
        },

        '-atime' => {
            option => sub {
                my ($cmp, $val) = check_cmp_option('-atime', shift @ARGV);

                push @criteria, ['-atime', ref_time_start($val, 86400), $cmp, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $ref, $cmp, $negate) = @_;
                my $m = $entry->{atime} - ($entry->{atime} % 86400);
                
                my $ret;
                if    ($cmp eq '-') { $ret = ($m > $ref); }
                elsif ($cmp eq '+') { $ret = ($m < $ref); }
                else                { $ret = ($m == $ref); }

                return $negate ? !$ret : $ret;
            },
        },

        '-mmin' => {
            option => sub {
                my ($cmp, $val) = check_cmp_option('-mmin', shift @ARGV);

                push @criteria, ['-mmin', ref_time_start($val, 60), $cmp, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $ref, $cmp, $negate) = @_;
                my $m = $entry->{mtime} - ($entry->{mtime} % 60);

                my $ret;
                if    ($cmp eq '-') { $ret = ($m > $ref); }
                elsif ($cmp eq '+') { $ret = ($m < $ref); }
                else                { $ret = ($m == $ref); }

                return $negate ? !$ret : $ret;
            },
        },

        '-amin' => {
            option => sub {
                my ($cmp, $val) = check_cmp_option('-amin', shift @ARGV);

                push @criteria, ['-amin', ref_time_start($val, 60), $cmp, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $ref, $cmp, $negate) = @_;
                my $m = $entry->{atime} - ($entry->{atime} % 60);

                my $ret;
                if    ($cmp eq '-') { $ret = ($m > $ref); }
                elsif ($cmp eq '+') { $ret = ($m < $ref); }
                else                { $ret = ($m == $ref); }

                return $negate ? !$ret : $ret;
            },
        },

        '-size' => {
            option => sub {
                my ($cmp, $val) = check_cmp_option('-size', shift @ARGV);

                push @criteria, ['-size', $val, $cmp, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $ref, $cmp, $negate) = @_;

                my $ret;
                if    ($cmp eq '-') { $ret = ($entry->{size} < $ref); }
                elsif ($cmp eq '+') { $ret = ($entry->{size} > $ref); }
                else                { $ret = ($entry->{size} == $ref); }
                
                return $negate ? !$ret : $ret;
            },
        },

        '-mode' => {
            option => sub {
                my ($cmp, $val) = check_cmp_option('-mode', shift @ARGV);
                push @criteria, ['-mode', oct($val), $cmp, $negate];
                $negate = 0;
            },
            filter => sub {
                my ($entry, $ref, $cmp, $negate) = @_;
                my $mode = $entry->{mode} & 07777;
                my $ret;
                if    ($cmp eq '-') { $ret = (($mode & $ref) < $ref); }
                elsif ($cmp eq '+') { $ret = (($mode & $ref) >= $ref); }
                else                { $ret = ($mode == $ref); }
                
                return $negate ? !$ret : $ret;
            },
        },

        '-maxdepth' => {
            option => sub {
                my $v = shift @ARGV;
                if (!defined $v or $v =~ /^-/) {
                    die "$script: option -maxdepth requires an argument\n";
                }
                $max_depth = $v;
            },
        },

        '-depth' => {
            option => sub { $depth_first = 1; },
        },

        '-print' => {
            option => sub {
                $eol     = "\n";
                $printf  = '%p';
                $ls_mode = 0;
            },
        },

        '-print0' => {
            option => sub {
                $eol     = "\0";
                $printf  = '%p';
                $ls_mode = 0;
            },
        },

        '-printf' => {
            option => sub {
                $eol     = "";
                $printf  = shift @ARGV;
                die "$script: option -printf requires an argument\n"
                    unless defined $printf;
                $ls_mode = 0;
            },
        },

        '-ls' => {
            option => sub {
                $eol     = "\n";
                $printf  = '%M %u %g %s %TI %p%l';
                $ls_mode = 1;
            },
        },

        '-ctime' => {
            option => sub { die "$script: unsupported option -ctime\n"; }
        },
        '-cmin' => {
            option => sub { die "$script: unsupported option -cmin\n"; }
        },
        '-user' => {
            option => sub { die "$script: unsupported option -user, use -uid\n"; }
        },
        '-group' => {
            option => sub { die "$script: unsupported option -group, use -gid\n"; }
        },
    );

while (@ARGV) {
    my $opt = shift @ARGV;
    die "$script: unknown argument $opt\n"
        unless exists $options{$opt};

    $options{$opt}->{option}();
}

my $ssh = Net::SSH2->new();

debug("connecting to $remote_host:$remote_port");
$ssh->connect($remote_host, $remote_port)
  or die "$script: failed to connect to $remote_host:$remote_port: $!\n";
debug("connected to ",remote_ip(),"...");

check_known_hosts($remote_host)
    unless $no_host_key_check;

die "$script: auth failed...\n"
    unless authenticate($remote_user, $pub_key, $sec_key);

debug("requesting subsystem 'sftp'");
my $sftp = $ssh->sftp()
    or die "$script: sftp() failed: ", ssh_errmsg() ,"\n";

if ($use_realpath) {
    my $real_base = $sftp->realpath($base_dir);
    die "$script: failed to get realpath of remote dir $base_dir\n"
        unless defined $real_base;
    $base_dir = $real_base;
}

debug("starting find()...");
find($base_dir, 1);
exit 0;

sub authenticate {
    my ($user, $pub, $sec) = @_;

    if ($use_ssh_agent and $ssh->auth_agent($user)) {
        debug("auth w/ requested auth agent succeeded");
        return 1;
    }

    if (defined $pub) {
        debug("trying 'publickey' with $pub / $sec...");
        return $ssh->auth_publickey($user, $pub, $sec);
    }

    if ($HAVE_AUTH_AGENT and not $use_ssh_agent) {
        debug("trying auth agent...");
        return 1
            if $ssh->auth_agent($user);
    }

    my @auth_list = $ssh->auth_list($user);
    while (@auth_list) {
        debug("auth methods left: ", join(", ", @auth_list));
        my $type = shift @auth_list;

        if ($type eq 'publickey') {
            foreach my $key (qw{ id_dsa id_rsa }) {
                my $file = "$HOME/.ssh/$key";
                if (-e $file) {
                    debug("trying 'publickey' with $file...");
                    if ($ssh->auth_publickey($user, "$file.pub", $file)) {
                        debug("auth as $user with public key $file succeeded");
                        return 1;
                    }
                }
            }
        }
        elsif ($type eq 'password') {
            debug("trying auth w/ 'password'...");
            return 1
                if $ssh->auth_password($user, get_password($ssh, $user));
        }
        elsif ($type eq 'keyboard-interactive') {
            debug("trying auth w/ 'keyboard-interactive'...");
            return 1
                if $ssh->auth_keyboard($user, \&get_password);
        }
        else {
            die "$script: FIXME: auth with method $type\n";
        }
    }
    
    debug("all auth methods failed...");
    return 0;
}

sub get_password {
    my $ssh  = shift;
    my $user = shift;

    require Term::ReadKey;

    print STDERR "[$script] $user\@$remote_host\'s password: ";
    Term::ReadKey::ReadMode('noecho');
    chomp(my $value = Term::ReadKey::ReadLine(0));
    Term::ReadKey::ReadMode('normal');

    return $value;
}

sub find {
    my $name  = shift;
    my $depth = shift;

    my $dir   = $sftp->opendir($name);
    unless ($dir) {
        warn "$script: '$name': ",ssh_errmsg(),"\n";
        return;
    }

    my @sub_dirs = ();
    while (my $entry = $dir->read()) {
        if (S_ISDIR($entry->{mode})) {
            next if $entry->{name} =~ /^\.\.?$/;

            if (!defined $max_depth or $depth < $max_depth) {
                if ($depth_first) {
                    find("$name/".$entry->{name}, $depth + 1);
                }
                else {
                    push @sub_dirs, "$name/".$entry->{name};
                }
            }
        }

        $entry->{path}  = $name;
        $entry->{depth} = $depth;
        if (filter($entry)) {
            print_entry($entry);
        }
    }

    foreach (@sub_dirs) {
        find($_, $depth + 1);
    }
}

sub print_entry {
    my $entry = shift;
    my @chars = split //, $printf;
    my $out   = "";
    my $fname = $entry->{path}."/".$entry->{name};
    $fname =~ tr{/}{/}s;

    while (@chars) {
        my $chr = shift @chars;
        if ($chr eq '%') {
            $chr = shift @chars;
            if    ($chr eq '%') { $out .= '%';             }
            elsif ($chr eq 'p') { $out .= $fname;          }
            elsif ($chr eq 'f') { $out .= $entry->{name};  }
            elsif ($chr eq 'h') { $out .= $entry->{path};  }
            elsif ($chr eq 's') { $out .= $entry->{size};  }

            elsif ($chr eq 'm') { $out .= sprintf "%o", $entry->{mode}; }
            elsif ($chr eq 'M') { $out .= get_ls_mode($entry); }

            elsif ($chr eq 't') { $out .= $entry->{mtime}; }
            elsif ($chr eq 'a') { $out .= $entry->{atime}; }

            elsif ($chr eq 'd') { $out .= $entry->{depth}; }

            elsif ($chr eq 'u') { $out .= $entry->{uid};   }
            elsif ($chr eq 'U') { $out .= $entry->{uid};   }
            elsif ($chr eq 'g') { $out .= $entry->{gid};   }
            elsif ($chr eq 'G') { $out .= $entry->{gid};   }

            elsif ($chr eq 'l') {
                my $target = $sftp->readlink($fname);
                if (defined $target) {
                    $out .= " -> $target";
                }
            }
            elsif ($chr eq 'T') {
                $chr = shift @chars;
                if ($chr eq '@') {
                    $out .= $entry->{mtime};
                }
                elsif ($chr eq 'I') {
                    $out .= strftime('%Y-%m-%d %H:%M:%S', localtime($entry->{mtime}));
                }
            }
            else {
                die "$script: unknown format \%$chr\n";
            }
        }
        elsif ($chr eq '\\') {
            $chr = shift @chars;
            eval "\$chr = \"\\$chr\";";
            $out .=  $chr;
        }
        else {
            $out .= $chr;
        }
    }
    
    print $out, $eol;
}

# FIXME: values taken from linux:
sub S_ISSOCK { ($_[0] & 0140000) == 0140000; }
sub S_ISLNK  { ($_[0] & 0120000) == 0120000; }


sub get_ls_mode {
    my $entry = shift;
    my $str   = '';

    if    (S_ISDIR($entry->{mode}))  { $str .= "d"; }
    elsif (S_ISREG($entry->{mode}))  { $str .= "-"; }
    elsif (S_ISFIFO($entry->{mode})) { $str .= "p"; }
    elsif (S_ISCHR($entry->{mode}))  { $str .= "c"; }
    elsif (S_ISBLK($entry->{mode}))  { $str .= "b"; }
    elsif (S_ISLNK($entry->{mode}))  { $str .= "l"; }
    elsif (S_ISSOCK($entry->{mode})) { $str .= "s"; }
    else  {
        warn "$script: unknown file type: ",
            sprintf "FILE=%s/%s MODE=%o %x\n",
                $entry->{path}, $entry->{name}, 
                    ($entry->{mode} &~ 07777), 
                    ($entry->{mode} &~ 07777);
        $str .= "U";
    }

    my $mode = $entry->{mode} & 07777;
    $str .= ($mode & 0400) ? "r" : "-";
    $str .= ($mode & 0200) ? "w" : "-";
    if    ($mode & 04000 and $mode & 0100) { $str .= "s"; }
    elsif ($mode & 0100)                   { $str .= "x"; }
    elsif ($mode & 04000)                  { $str .= "S"; }
    else                                   { $str .= "-"; }

    $str .= ($mode & 040) ? "r" : "-";
    $str .= ($mode & 020) ? "w" : "-";
    if    ($mode & 02000 and $mode & 010) { $str .= "s"; }
    elsif ($mode & 010)                   { $str .= "x"; }
    elsif ($mode & 02000)                 { $str .= "S"; }
    else                                  { $str .= "-"; }

    $str .= ($mode & 04) ? "r" : "-";
    $str .= ($mode & 02) ? "w" : "-";
    if    ($mode & 01000 and $mode & 01) { $str .= "t"; }
    elsif ($mode & 01)                   { $str .= "x"; }
    elsif ($mode & 01000)                { $str .= "T"; }
    else                                 { $str .= "-"; }

    return $str;
}

sub ref_time_start {
    my ($val, $time) = @_;
    return $^T - ($^T % $time) - ($val * $time);
}

sub check_cmp_option {
    my $opt   = shift;
    my $value = shift;
    die "$script: option $opt requires an argument\n"
        unless defined $value;
    $value =~ /^(\+|-)?(\d+)$/
        or die "$script: illegal value for $opt option\n";
    return (defined $1 ? $1 : "", $2);
}

sub filter {
    my $entry = shift;
    foreach my $crit (@criteria) {
        my @data = @$crit;
        my $opt = shift @data;
        $options{$opt}->{filter}->($entry, @data)
            or return 0;
    }
    return 1;
}

sub usage {
    return <<_END;
$script: Usage: $script [SSH_OPTIONS] [user\@]host:[DIR] [FIND_OPTIONS]
_END
}

sub ssh_errmsg { ($ssh->error)[2]; }

sub libssh2_version {
    my $version = scalar Net::SSH2::version();
    $version =~ /^(\d+)\.(\d+)\.(\d+)/;
    if ($1 >= 1) {
        return (sprintf "%d%02d%02d", $1, $2, $3)+0;
    }
    else {
        return (sprintf "%2d%02d", $2, $3)+0;
    }
}

sub known_hosts_key {
    my $host = shift;

    open my $known_hosts, "$HOME/.ssh/known_hosts"
        or return "";

    while (<$known_hosts>) {
        chomp;
        if (s/^\|1\|//) {
            next unless /^([^|]+)\|(.*?)\s+(\S+)\s+(\S+)$/;
            my ($salt, $hash, $key) = ($1, $2, $4);
            $salt = decode_base64($salt);
            $hash = decode_base64($hash);
            if ($hash eq hmac_sha1($host, $salt)) {
                close $known_hosts;
                return sha1( decode_base64($key) );
            }
        }
        else {
            next unless /^(\S+)\s+\S+\s+(\S+)$/;
            my ($host_part, $key) = ($1, $2);
            if ($host_part =~ /^\Q$host\E(,\S+)?$/) {
                close $known_hosts;
                return sha1( decode_base64($key) );
            }
        }
    }
    close $known_hosts;
    return "";
}

sub check_known_hosts {
    my $remote = shift;

    unless ($ssh->hostkey("SHA1") eq known_hosts_key($remote)) {
        printf STDERR "The authenticity of host '%s (%s)' can't be established.
%s key fingerprint is %s.
Are you sure you want to continue connecting (yes/no)? ",
                $remote, remote_ip(), hostkey_type(), hostkey_hex();
        require Term::ReadKey;
        chomp(my $value = Term::ReadKey::ReadLine(0));
        exit 1 unless $value eq 'yes';
    }
}

sub hostkey_type { $ssh->method('HOSTKEY') eq 'ssh-rsa' ? 'RSA' : 'DSS'; }

sub remote_ip    { inet_ntoa((sockaddr_in($ssh->sock->peername))[1]); }

sub hostkey_hex {
    join ":", map { sprintf "%02x", $_ } unpack("C*", $ssh->hostkey("MD5"));
}

sub debug {
    if ($DEBUG) {
        my @msg = @_;
        chomp @msg;
        print STDERR sprintf "%d.%06d - %s\n", gettimeofday, join("", @msg)
    }
}

# vim: ts=4 sw=4 expandtab syn=perl
